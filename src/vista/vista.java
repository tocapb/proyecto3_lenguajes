/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.table.DefaultTableModel;
import org.jpl7.Query;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.table.TableModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author rzumb
 */
public class vista extends javax.swing.JFrame {

    /**
     * Creates new form vista
     */
    public vista() {
        initComponents();
        t = new Timer(10, acciones);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boton_kakuro_9x9 = new javax.swing.JButton();
        boton_limpiar_tablero = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_principal = new javax.swing.JTable();
        etiqueta_inserta = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_inserta_coordenadas = new javax.swing.JTable();
        boton_inserta_coordenadas = new javax.swing.JButton();
        boton_kakuro_13x13 = new javax.swing.JButton();
        boton_kakuro_3x3 = new javax.swing.JButton();
        boton_kakuro_4x4 = new javax.swing.JButton();
        boton_kakuro_5x5 = new javax.swing.JButton();
        boton_verificar = new javax.swing.JButton();
        num_sugerencias = new javax.swing.JTextField();
        boton_sugerencias = new javax.swing.JButton();
        boton_solucion = new javax.swing.JButton();
        text_errores = new javax.swing.JTextField();
        num_errores = new javax.swing.JTextField();
        text_vacios = new javax.swing.JTextField();
        num_vacios = new javax.swing.JTextField();
        etiquetaTiempo = new javax.swing.JLabel();
        repeticion = new javax.swing.JButton();
        boton_estadisticas = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kakuro");
        setName("frame"); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        boton_kakuro_9x9.setText("Generar Kakuro 9x9");
        boton_kakuro_9x9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_kakuro_9x9ActionPerformed(evt);
            }
        });
        getContentPane().add(boton_kakuro_9x9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 150, -1));

        boton_limpiar_tablero.setText("Limpiar Tablero");
        boton_limpiar_tablero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_limpiar_tableroActionPerformed(evt);
            }
        });
        getContentPane().add(boton_limpiar_tablero, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 150, -1));

        tabla_principal = new javax.swing.JTable(){
            public boolean isCellEditable(int row,int colum){
                return false;
            }
        };
        tabla_principal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla_principal.setRowHeight(41);
        tabla_principal.setRowMargin(8);
        tabla_principal.getTableHeader().setResizingAllowed(false);
        tabla_principal.getTableHeader().setReorderingAllowed(false);
        tabla_principal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_principalMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla_principal);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 690, 570));

        etiqueta_inserta.setBackground(new java.awt.Color(204, 204, 204));
        etiqueta_inserta.setForeground(java.awt.Color.white);
        etiqueta_inserta.setText("Insertar Valor por Coordenadas");
        getContentPane().add(etiqueta_inserta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 210, 20));

        tabla_inserta_coordenadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Coordenada X", "Coordenada Y", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_inserta_coordenadas.setRowHeight(35);
        tabla_inserta_coordenadas.getTableHeader().setResizingAllowed(false);
        tabla_inserta_coordenadas.getTableHeader().setReorderingAllowed(false);
        tabla_inserta_coordenadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_inserta_coordenadasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_inserta_coordenadas);
        if (tabla_inserta_coordenadas.getColumnModel().getColumnCount() > 0) {
            tabla_inserta_coordenadas.getColumnModel().getColumn(0).setResizable(false);
            tabla_inserta_coordenadas.getColumnModel().getColumn(1).setResizable(false);
            tabla_inserta_coordenadas.getColumnModel().getColumn(2).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 280, 70));

        boton_inserta_coordenadas.setText("Insertar");
        boton_inserta_coordenadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_inserta_coordenadasActionPerformed(evt);
            }
        });
        getContentPane().add(boton_inserta_coordenadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, -1));

        boton_kakuro_13x13.setText("Generar Kakuro 13x13");
        boton_kakuro_13x13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_kakuro_13x13ActionPerformed(evt);
            }
        });
        getContentPane().add(boton_kakuro_13x13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 180, -1));

        boton_kakuro_3x3.setText("Generar Kakuro 3x3");
        boton_kakuro_3x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_kakuro_3x3ActionPerformed(evt);
            }
        });
        getContentPane().add(boton_kakuro_3x3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 150, -1));

        boton_kakuro_4x4.setText("Generar Kakuro 4x4");
        boton_kakuro_4x4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_kakuro_4x4ActionPerformed(evt);
            }
        });
        getContentPane().add(boton_kakuro_4x4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 150, -1));

        boton_kakuro_5x5.setText("Generar Kakuro 5x5");
        boton_kakuro_5x5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_kakuro_5x5ActionPerformed(evt);
            }
        });
        getContentPane().add(boton_kakuro_5x5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 150, -1));

        boton_verificar.setText("Verificar");
        boton_verificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_verificarActionPerformed(evt);
            }
        });
        getContentPane().add(boton_verificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, 150, -1));

        num_sugerencias.setEditable(false);
        num_sugerencias.setText("(5)");
        num_sugerencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_sugerenciasActionPerformed(evt);
            }
        });
        getContentPane().add(num_sugerencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, -1, 30));

        boton_sugerencias.setText("Sugerencias");
        boton_sugerencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_sugerenciasActionPerformed(evt);
            }
        });
        getContentPane().add(boton_sugerencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));

        boton_solucion.setText("Ver Solución");
        boton_solucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_solucionActionPerformed(evt);
            }
        });
        getContentPane().add(boton_solucion, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 490, 150, -1));

        text_errores.setEditable(false);
        text_errores.setText("Cantidad de Errores");
        text_errores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_erroresActionPerformed(evt);
            }
        });
        getContentPane().add(text_errores, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 130, 30));

        num_errores.setEditable(false);
        getContentPane().add(num_errores, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 30, 30));

        text_vacios.setEditable(false);
        text_vacios.setText("Cantidad de Espacios Vacíos");
        getContentPane().add(text_vacios, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 180, 30));

        num_vacios.setEditable(false);
        getContentPane().add(num_vacios, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 30, 30));

        etiquetaTiempo.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaTiempo.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        etiquetaTiempo.setText("00:00:00:00");
        etiquetaTiempo.setToolTipText("");
        getContentPane().add(etiquetaTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 140, 40));

        repeticion.setText("Guardar Repetición");
        repeticion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeticionActionPerformed(evt);
            }
        });
        getContentPane().add(repeticion, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 150, -1));

        boton_estadisticas.setText("Estadísticas");
        boton_estadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_estadisticasActionPerformed(evt);
            }
        });
        getContentPane().add(boton_estadisticas, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 130, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boton_limpiar_tableroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_limpiar_tableroActionPerformed
        t.start();
        h=0; m=0; s=0; cs=0;
        actualizarLabel();
        cantidad_veri=0;
        autosolucion=false;
        cantidad_sugerencias=0;
        num_errores.setText(" ");
        num_vacios.setText(" ");
        if(tabla_principal.getRowCount() == 9){
            
            int n=9;
            String [][] tablero= new String[n][n];
            tablero=this.matrizProlog9x9();
            this.mostrarMatriz(tablero, n);
       
        }
        else if(tabla_principal.getRowCount() == 3){
            int n=3;
            String [][] tablero= new String[n][n];
            tablero=this.matrizProlog3x3();
            this.mostrarMatriz(tablero, n);
       
        }
        else if(tabla_principal.getRowCount() == 4){
            int n=4;
            String [][] tablero= new String[n][n];
            tablero=this.matrizProlog4x4();
            this.mostrarMatriz(tablero, n);
     
        }
        else if(tabla_principal.getRowCount() == 5){
            int n=5;
            String [][] tablero= new String[n][n];
            tablero=this.matrizProlog5x5();
            this.mostrarMatriz(tablero, n);
        }
        
        else if(tabla_principal.getRowCount() == 13){
            
            int n=13;
            String [][] tablero= new String[n][n];
            tablero=this.matrizProlog13x13();
            this.mostrarMatriz(tablero, n);
       
        }
    }//GEN-LAST:event_boton_limpiar_tableroActionPerformed
    private int num=5;
    private int captura=0;
    private int cantidad_veri=0;
    private boolean autosolucion=false;
    private int cantidad_sugerencias=0;
    private void tabla_principalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_principalMouseClicked
        // TODO add your handling code here:
        int row = tabla_principal.getSelectedRow();
        int colum = tabla_principal.getSelectedColumn();
        TableModel modelo= tabla_principal.getModel();
        
        if(tabla_principal.getValueAt(row, colum).equals(" ") || tabla_principal.getValueAt(row, colum).equals("1")|| tabla_principal.getValueAt(row, colum).equals("2")|| tabla_principal.getValueAt(row, colum).equals("3")|| tabla_principal.getValueAt(row, colum).equals("4")|| tabla_principal.getValueAt(row, colum).equals("5")|| tabla_principal.getValueAt(row, colum).equals("6")|| tabla_principal.getValueAt(row, colum).equals("7")|| tabla_principal.getValueAt(row, colum).equals("8")|| tabla_principal.getValueAt(row, colum).equals("9") ){
            
            
            JPopupMenu popupmenu= new JPopupMenu();
        
            JMenuItem numero_1 = new JMenuItem("1");
            JMenuItem numero_2 = new JMenuItem("2");
            JMenuItem numero_3 = new JMenuItem("3");
            JMenuItem numero_4 = new JMenuItem("4");
            JMenuItem numero_5 = new JMenuItem("5");
            JMenuItem numero_6 = new JMenuItem("6");
            JMenuItem numero_7 = new JMenuItem("7");
            JMenuItem numero_8 = new JMenuItem("8");
            JMenuItem numero_9 = new JMenuItem("9");
            
            

            numero_1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("1", row,colum);
                }
            });
            numero_2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("2", row,colum);
                }
            });
            numero_3.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("3", row,colum);
                }
            });
            numero_4.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("4", row,colum);
                }
            });
            numero_5.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("5", row,colum);
                }
            });
            numero_6.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("6", row,colum);
                }
            });
            numero_7.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("7", row,colum);
                }
            });
            numero_8.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("8", row,colum);
                }
            });
            numero_9.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    tabla_principal.setValueAt("9", row,colum);
                }
            });
            popupmenu.add(numero_1);
            popupmenu.add(numero_2);
            popupmenu.add(numero_3);
            popupmenu.add(numero_4);
            popupmenu.add(numero_5);
            popupmenu.add(numero_6);
            popupmenu.add(numero_7);
            popupmenu.add(numero_8);
            popupmenu.add(numero_9);
            tabla_principal.setComponentPopupMenu(popupmenu);
            
      
        }
        else{
        
            JPopupMenu popupmenu= new JPopupMenu();
            tabla_principal.setComponentPopupMenu(popupmenu);
            
        }

        
    }//GEN-LAST:event_tabla_principalMouseClicked

    private void boton_kakuro_9x9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_kakuro_9x9ActionPerformed
        // TODO add your handling code here:
        int n=9;
        String [][] tablero= new String[n][n];
        tablero=this.matrizProlog9x9();
        this.mostrarMatriz(tablero, n);
        num=5;
        num_sugerencias.setText("(5)");
        num_errores.setText(" ");
        num_vacios.setText(" ");
        h=0; m=0; s=0; cs=0;
        actualizarLabel();
        t.start();
        cantidad_veri=0;     
        autosolucion=false;
        cantidad_sugerencias=0;
    }//GEN-LAST:event_boton_kakuro_9x9ActionPerformed

    private void tabla_inserta_coordenadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_inserta_coordenadasMouseClicked
        // TODO add your handling code here:
        int row = tabla_inserta_coordenadas.getSelectedRow();
        int colum = tabla_inserta_coordenadas.getSelectedColumn();
   
        JPopupMenu popupmenu2= new JPopupMenu();

        JMenuItem numero_1_v2 = new JMenuItem("1");
        JMenuItem numero_2_v2 = new JMenuItem("2");
        JMenuItem numero_3_v2 = new JMenuItem("3");
        JMenuItem numero_4_v2 = new JMenuItem("4");
        JMenuItem numero_5_v2 = new JMenuItem("5");
        JMenuItem numero_6_v2 = new JMenuItem("6");
        JMenuItem numero_7_v2 = new JMenuItem("7");
        JMenuItem numero_8_v2 = new JMenuItem("8");
        JMenuItem numero_9_v2 = new JMenuItem("9");



        numero_1_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("1", row,colum);
            }
        });
        numero_2_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("2", row,colum);
            }
        });
        numero_3_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("3", row,colum);
            }
        });
        numero_4_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("4", row,colum);
            }
        });
        numero_5_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("5", row,colum);
            }
        });
        numero_6_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("6", row,colum);
            }
        });
        numero_7_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("7", row,colum);
            }
        });
        numero_8_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("8", row,colum);
            }
        });
        numero_9_v2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                tabla_inserta_coordenadas.setValueAt("9", row,colum);
            }
        });
        popupmenu2.add(numero_1_v2);
        popupmenu2.add(numero_2_v2);
        popupmenu2.add(numero_3_v2);
        popupmenu2.add(numero_4_v2);
        popupmenu2.add(numero_5_v2);
        popupmenu2.add(numero_6_v2);
        popupmenu2.add(numero_7_v2);
        popupmenu2.add(numero_8_v2);
        popupmenu2.add(numero_9_v2);
        tabla_inserta_coordenadas.setComponentPopupMenu(popupmenu2);
            
      
            
        

    }//GEN-LAST:event_tabla_inserta_coordenadasMouseClicked

    private void boton_inserta_coordenadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_inserta_coordenadasActionPerformed
        // TODO add your handling code here:
        String verifica_pos = tabla_principal.getValueAt(Integer.parseInt(tabla_inserta_coordenadas.getValueAt(0,1).toString())-1,Integer.parseInt(tabla_inserta_coordenadas.getValueAt(0,0).toString())-1).toString();
        if (verifica_pos.equals(" ") || verifica_pos.equals("1") || verifica_pos.equals("2") || verifica_pos.equals("3") || verifica_pos.equals("4") || verifica_pos.equals("5") || verifica_pos.equals("6") || verifica_pos.equals("7") || verifica_pos.equals("8") || verifica_pos.equals("9") ){
            tabla_principal.setValueAt(tabla_inserta_coordenadas.getValueAt(0,2).toString(), Integer.parseInt(tabla_inserta_coordenadas.getValueAt(0,1).toString())-1,Integer.parseInt(tabla_inserta_coordenadas.getValueAt(0,0).toString())-1);
        
        }
        
        
        
    }//GEN-LAST:event_boton_inserta_coordenadasActionPerformed

    private void boton_kakuro_4x4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_kakuro_4x4ActionPerformed
        int n=4;
        String [][] tablero= new String[n][n];
        tablero=this.matrizProlog4x4();
        this.mostrarMatriz(tablero, n);
        num=5;
        num_sugerencias.setText("(5)");
        num_errores.setText(" ");
        num_vacios.setText(" ");
        h=0; m=0; s=0; cs=0;
        actualizarLabel();
        t.start();
        cantidad_veri=0;
        autosolucion=false;
        cantidad_sugerencias=0;
    }//GEN-LAST:event_boton_kakuro_4x4ActionPerformed
   
    private void boton_kakuro_3x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_kakuro_3x3ActionPerformed
        int n=3;
        String [][] tablero= new String[n][n];
        tablero=this.matrizProlog3x3();
        this.mostrarMatriz(tablero, n);
        num=5;
        num_sugerencias.setText("(5)");
        num_errores.setText(" ");
        num_vacios.setText(" ");
        h=0; m=0; s=0; cs=0;
        actualizarLabel();
        t.start();
        autosolucion=false;
        cantidad_sugerencias=0;
    }//GEN-LAST:event_boton_kakuro_3x3ActionPerformed

    private void boton_kakuro_5x5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_kakuro_5x5ActionPerformed
        int n=5;
        String [][] tablero= new String[n][n];
        tablero=this.matrizProlog5x5();
        this.mostrarMatriz(tablero, n);
        num=5;
        num_sugerencias.setText("(5)");
        num_errores.setText(" ");
        num_vacios.setText(" ");
        h=0; m=0; s=0; cs=0;
        actualizarLabel();
        t.start();
        cantidad_veri=0;
        autosolucion=false;
        cantidad_sugerencias=0;
    }//GEN-LAST:event_boton_kakuro_5x5ActionPerformed
    
    private void boton_kakuro_13x13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_kakuro_13x13ActionPerformed
        int n=13;
        String [][] tablero= new String[n][n];
        tablero=this.matrizProlog13x13();
        this.mostrarMatriz(tablero, n);
        num=5;
        num_sugerencias.setText("(5)");
        num_errores.setText(" ");
        num_vacios.setText(" ");
        h=0; m=0; s=0; cs=0;
        actualizarLabel();
        t.start();
        cantidad_veri=0;
        autosolucion=false;
        cantidad_sugerencias=0;
    }//GEN-LAST:event_boton_kakuro_13x13ActionPerformed

    private void boton_verificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_verificarActionPerformed
        cantidad_veri++;
        String t1= "consult('board.pl')";
        Query q1= new Query(t1);
        System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));
        
        String matricita= Arrays.deepToString(this.verificar_solucion(1));
        String revisa_vacios="revisaMatrizVacios("+matricita+",Res)";
        Query q2 = new Query(revisa_vacios);
        String vacios = q2.oneSolution().get("Res").toString();
        num_vacios.setText(vacios);
        
        String revisa_incorrectos="enviadorRevisaMatriz("+matricita+",Res2)";
        Query q3 = new Query(revisa_incorrectos);
        String incorrectos = q3.oneSolution().get("Res2").toString();
        num_errores.setText(incorrectos);
        
        if (vacios.equals("0") && incorrectos.equals("0")){
            t.stop();
            JOptionPane.showMessageDialog(null,"Felicidades!! Juego Completado");

        }
        
    }//GEN-LAST:event_boton_verificarActionPerformed

    private void num_sugerenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_sugerenciasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_num_sugerenciasActionPerformed
   
    private void boton_sugerenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_sugerenciasActionPerformed

        String num_actual=num_sugerencias.getText().toString();
        int cantidad_vacios=0;
        for(int i=0; i< tabla_principal.getColumnCount(); i++){
            for(int h=0; h< tabla_principal.getRowCount(); h++){
                if (tabla_principal.getValueAt(i,h).equals(" ")){
                    cantidad_vacios ++;
            
                }
            }
        }
       
        if (cantidad_vacios < num){
            num=cantidad_vacios;
        }
        else {

            num=num;
        }
        if (tabla_principal.getColumnCount() > 0){
            if (num != 0){
                cantidad_sugerencias++;
                int cantidad_matriz=tabla_principal.getColumnCount();
                if (cantidad_matriz == 9){
                    Random num_aleatorio= new Random();
                    int row = num_aleatorio.nextInt(9);
                    int colum = num_aleatorio.nextInt(9);

                    String [][] matriz_buena= new String [9][9];
                    matriz_buena = this.matrizProlog9x9_res();
                    String pos_matriz_buena= matriz_buena [row][colum];
                    while (!tabla_principal.getValueAt(row, colum).equals(" ") && (!pos_matriz_buena.equals("1") || !pos_matriz_buena.equals("2")|| !pos_matriz_buena.equals("3")|| !pos_matriz_buena.equals("4")|| !pos_matriz_buena.equals("5")|| !pos_matriz_buena.equals("6")|| !pos_matriz_buena.equals("7")|| !pos_matriz_buena.equals("8")|| !pos_matriz_buena.equals("9"))){
                        row = num_aleatorio.nextInt(9);
                        colum = num_aleatorio.nextInt(9);
                    }
                    String valor=matriz_buena [row][colum];

                    tabla_principal.setValueAt(valor, row, colum);


                }
                if (cantidad_matriz == 3){
                    Random num_aleatorio= new Random();
                    int row = num_aleatorio.nextInt(3);
                    int colum = num_aleatorio.nextInt(3);

                    String [][] matriz_buena= new String [3][3];
                    matriz_buena = this.matrizProlog3x3_res();
                    String pos_matriz_buena= matriz_buena [row][colum];
                    while (!tabla_principal.getValueAt(row, colum).equals(" ") && (!pos_matriz_buena.equals("1") || !pos_matriz_buena.equals("2")|| !pos_matriz_buena.equals("3")|| !pos_matriz_buena.equals("4")|| !pos_matriz_buena.equals("5")|| !pos_matriz_buena.equals("6")|| !pos_matriz_buena.equals("7")|| !pos_matriz_buena.equals("8")|| !pos_matriz_buena.equals("9"))){
                        row = num_aleatorio.nextInt(3);
                        colum = num_aleatorio.nextInt(3);
                    }
                    String valor=matriz_buena [row][colum];

                    tabla_principal.setValueAt(valor, row, colum);


                }
                if (cantidad_matriz == 4){
                    Random num_aleatorio= new Random();
                    int row = num_aleatorio.nextInt(4);
                    int colum = num_aleatorio.nextInt(4);

                    String [][] matriz_buena= new String [4][4];
                    matriz_buena = this.matrizProlog4x4_res();
                    String pos_matriz_buena= matriz_buena [row][colum];
                    while (!tabla_principal.getValueAt(row, colum).equals(" ") && (!pos_matriz_buena.equals("1") || !pos_matriz_buena.equals("2")|| !pos_matriz_buena.equals("3")|| !pos_matriz_buena.equals("4")|| !pos_matriz_buena.equals("5")|| !pos_matriz_buena.equals("6")|| !pos_matriz_buena.equals("7")|| !pos_matriz_buena.equals("8")|| !pos_matriz_buena.equals("9"))){
                        row = num_aleatorio.nextInt(4);
                        colum = num_aleatorio.nextInt(4);
                    }
                    String valor=matriz_buena [row][colum];

                    tabla_principal.setValueAt(valor, row, colum);


                }
                if (cantidad_matriz == 5){
                    Random num_aleatorio= new Random();
                    int row = num_aleatorio.nextInt(5);
                    int colum = num_aleatorio.nextInt(5);

                    String [][] matriz_buena= new String [5][5];
                    matriz_buena = this.matrizProlog5x5_res();
                    String pos_matriz_buena= matriz_buena [row][colum];
                    while (!tabla_principal.getValueAt(row, colum).equals(" ") && (!pos_matriz_buena.equals("1") || !pos_matriz_buena.equals("2")|| !pos_matriz_buena.equals("3")|| !pos_matriz_buena.equals("4")|| !pos_matriz_buena.equals("5")|| !pos_matriz_buena.equals("6")|| !pos_matriz_buena.equals("7")|| !pos_matriz_buena.equals("8")|| !pos_matriz_buena.equals("9"))){
                        row = num_aleatorio.nextInt(5);
                        colum = num_aleatorio.nextInt(5);
                    }
                    String valor=matriz_buena [row][colum];

                    tabla_principal.setValueAt(valor, row, colum);


                }
                if (cantidad_matriz == 13){
                    Random num_aleatorio= new Random();
                    int row = num_aleatorio.nextInt(13);
                    int colum = num_aleatorio.nextInt(13);

                    String [][] matriz_buena= new String [13][13];
                    matriz_buena = this.matrizProlog13x13_res();
                    String pos_matriz_buena= matriz_buena [row][colum];
                    while (!tabla_principal.getValueAt(row, colum).equals(" ") && (!pos_matriz_buena.equals("1") || !pos_matriz_buena.equals("2")|| !pos_matriz_buena.equals("3")|| !pos_matriz_buena.equals("4")|| !pos_matriz_buena.equals("5")|| !pos_matriz_buena.equals("6")|| !pos_matriz_buena.equals("7")|| !pos_matriz_buena.equals("8")|| !pos_matriz_buena.equals("9"))){
                        row = num_aleatorio.nextInt(13);
                        colum = num_aleatorio.nextInt(13);
                    }
                    String valor=matriz_buena [row][colum];

                    tabla_principal.setValueAt(valor, row, colum);


                }
            }
            if (num_actual.equals("(0)")){

                num_sugerencias.setText("(0)");

            }
            else if (num == 1 ){

                num =0;
                num_sugerencias.setText("(0)");


            }
            else if (num == 5 ){

                num--;
                num_sugerencias.setText("(4)");

            }

            else if (num == 4 ){

                num--;
                num_sugerencias.setText("(3)");

            }
            else if (num == 3 ){

                num--;
                num_sugerencias.setText("(2)");

            }
            else if (num == 2 ){

                num--;
                num_sugerencias.setText("(1)");

            }
        }
    
    
        

    
    }//GEN-LAST:event_boton_sugerenciasActionPerformed

    private void boton_solucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_solucionActionPerformed
        autosolucion=true;
        int cantidad_matriz=tabla_principal.getColumnCount();
                if (cantidad_matriz == 9){
                
                    int n=9;
                    String [][] tablero= new String[n][n];
                    tablero=this.matrizProlog9x9_res();
                    this.mostrarMatriz(tablero, n);
                   
                }
                if (cantidad_matriz == 3){
                    int n=3;
                    String [][] tablero= new String[n][n];
                    tablero=this.matrizProlog3x3_res();
                    this.mostrarMatriz(tablero, n);

                }
                if (cantidad_matriz == 4){
                    
                    int n=4;
                    String [][] tablero= new String[n][n];
                    tablero=this.matrizProlog4x4_res();
                    this.mostrarMatriz(tablero, n);
                }
                if (cantidad_matriz == 5){
                
                    int n=5;
                    String [][] tablero= new String[n][n];
                    tablero=this.matrizProlog5x5_res();
                    this.mostrarMatriz(tablero, n);

                }
                if (cantidad_matriz == 13){
                    
                    int n=13;
                    String [][] tablero= new String[n][n];
                    tablero=this.matrizProlog13x13_res();
                    this.mostrarMatriz(tablero, n);


                }
    }//GEN-LAST:event_boton_solucionActionPerformed

    private void text_erroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_erroresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_erroresActionPerformed

    private void repeticionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeticionActionPerformed

        BufferedImage img = new BufferedImage(tabla_principal.getWidth(), tabla_principal.getHeight(), BufferedImage.TYPE_INT_RGB);
        tabla_principal.paint(img.getGraphics());
        
        captura++;
        File outputfile = new File("ultima_jugada"+captura+".png");
        try {
            ImageIO.write(img, "png", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(vista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_repeticionActionPerformed

    private void boton_estadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_estadisticasActionPerformed
        this.estadisticas();
    }//GEN-LAST:event_boton_estadisticasActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
           
           
            
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vista().setVisible(true);
            }
        });
        
       
    
    }
        public void mostrarMatriz(String matriz[][], int n){
        DefaultTableModel model = (DefaultTableModel) tabla_principal.getModel();
        
        model.setRowCount(n);
        model.setColumnCount(n);
       
        
            for(int i=0; i<n; i++){
                for(int j=0; j<n; j++){
                    tabla_principal.setValueAt(matriz[i][j], i, j);

                }

            }
       
        }
        
        public String[][] matrizProlog9x9(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t9x9(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<9 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<9 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=9 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        public String[][] matrizProlog9x9_res(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t9x9Res(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<9 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<9 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=9 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
         
        public String[][] matrizProlog3x3(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t3x3(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<3 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<3 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=3 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        public String[][] matrizProlog3x3_res(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t3x3Res(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<3 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<3 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=3 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        
        public String[][] matrizProlog4x4(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t4x4(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<4 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<4 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=4 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        public String[][] matrizProlog4x4_res(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t4x4Res(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<4 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<4 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=4 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        
        public String[][] matrizProlog5x5(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t5x5(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<5 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<5 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=5 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        public String[][] matrizProlog5x5_res(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t5x5Res(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [9][9];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<5 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<5 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=5 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        
        public String[][] matrizProlog13x13(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t13x13(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [13][13];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<13 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<13 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=13 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        public String[][] matrizProlog13x13_res(){
            String t1= "consult('board.pl')";
            Query q1= new Query(t1);
            System.out.println(t1+""+(q1.hasSolution()? "satisfactoria":"insatisfactoria"));

            String t2="t13x13Res(Tablero)";
            Query q2 = new Query(t2);

            String accion = q2.oneSolution().get("Tablero").toString();
            System.out.println(accion);
            String cadena = accion;
            List<String> fila = new ArrayList <String>();
            List<String> fila_completa = new ArrayList <String>();
            StringTokenizer st = new StringTokenizer(cadena, "[,\']");
            while(st.hasMoreTokens()){
                
                
                fila.add(st.nextToken());
                
               
            }
            Iterator it = fila.iterator();
            int i=0;
            while(it.hasNext()){
                if (it.next().equals(" ")){
                    it.remove();
                }
                
                i++;
            }
                
            
            for(i=0; i< fila.size();i++){
            
                if(fila.get(i).charAt(0) == '('){
                    fila_completa.add(fila.get(i).concat(",").concat(fila.get(i+1)));
                    i++;
                
                }
                else
                    fila_completa.add(fila.get(i).concat(" "));
            
            
            }
            String [][] matriz= new String [13][13];
            int h=0;
            int j=0;
            for (i=0; i< fila_completa.size(); i++){
                if (j<13 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else if (j<13 && fila_completa.get(i).charAt(1) != '_'){
                    matriz [h][j] = fila_completa.get(i);
                    j++;
                }
                else if (j>=13 && fila_completa.get(i).charAt(1) == '_'){
                    matriz [h][j] = " ";
                    j++;
                }
                else{
                    j=0;
                    h++;
                    matriz[h][j] = fila_completa.get(i);
                    j++;
                    
                }
            }
            return matriz;
        }
        
        public String [][] verificar_solucion(int x){
            String [][] matriz = new String[tabla_principal.getColumnCount()][tabla_principal.getRowCount()];
            
            switch(x){
                case 1:
                   
                    for(int i=0; i< tabla_principal.getColumnCount(); i++){
                        for(int h=0; h< tabla_principal.getRowCount(); h++){
                            if (tabla_principal.getValueAt(i,h).toString().equals(" ")){
                                
                                matriz[i][h]= "o";
                            
                            }
                            else{
                                matriz[i][h]= tabla_principal.getValueAt(i,h).toString();
                            }
                        }
                        
                    };
                    return matriz;
                default:
                    return matriz;
            }
            
        }
      
    private Timer t;
    private int h, m, s, cs;
    private ActionListener acciones = new ActionListener(){

        @Override
        public void actionPerformed(ActionEvent ae) {
            ++cs; 
            if(cs==100){
                cs = 0;
                ++s;
            }
            if(s==60) 
            {
                s = 0;
                ++m;
            }
            if(m==60)
            {
                m = 0;
                ++h;
            }
            actualizarLabel();
        }
        
    };
    
    private void actualizarLabel() {
        String tiempo = (h<=9?"0":"")+h+":"+(m<=9?"0":"")+m+":"+(s<=9?"0":"")+s+":"+(cs<=9?"0":"")+cs;
        etiquetaTiempo.setText(tiempo);
    }
    
    public void estadisticas(){
        int cantidad_introducida=0;
        String estado="";
        if (num_errores.getText().equals("0") && num_vacios.getText().equals("0")){
            
            estado="Exitoso";
        
        }
        else
        {
        
            estado="Abandono(Por Nuevo Juego)";
        }
        if (autosolucion == true){
            estado="Autosolución";
        
        }
        for(int i=0; i< tabla_principal.getColumnCount(); i++){
            for(int h=0; h< tabla_principal.getRowCount(); h++){
                if (tabla_principal.getValueAt(i,h).toString().equals("1") || tabla_principal.getValueAt(i,h).toString().equals("2") || tabla_principal.getValueAt(i,h).toString().equals("3")|| tabla_principal.getValueAt(i,h).toString().equals("4")|| tabla_principal.getValueAt(i,h).toString().equals("5")|| tabla_principal.getValueAt(i,h).toString().equals("6")|| tabla_principal.getValueAt(i,h).toString().equals("7")|| tabla_principal.getValueAt(i,h).toString().equals("8")|| tabla_principal.getValueAt(i,h).toString().equals("9")){
                    cantidad_introducida++;
                }

            }

        };
        JOptionPane.showMessageDialog(null," Cantidad de celdas de ingreso de dígitos: "+ cantidad_introducida+"\n Cantidad de verificaciones realizadas: "+ cantidad_veri+"\n Cantidad de errores de verificación: "+num_errores.getText()+"\n Cantidad de sugerencias utilizadas: "+cantidad_sugerencias+"\n Tipo Finalización: "+estado);
    
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_estadisticas;
    private javax.swing.JButton boton_inserta_coordenadas;
    private javax.swing.JButton boton_kakuro_13x13;
    private javax.swing.JButton boton_kakuro_3x3;
    private javax.swing.JButton boton_kakuro_4x4;
    private javax.swing.JButton boton_kakuro_5x5;
    private javax.swing.JButton boton_kakuro_9x9;
    private javax.swing.JButton boton_limpiar_tablero;
    private javax.swing.JButton boton_solucion;
    private javax.swing.JButton boton_sugerencias;
    private javax.swing.JButton boton_verificar;
    private javax.swing.JLabel etiquetaTiempo;
    private javax.swing.JLabel etiqueta_inserta;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField num_errores;
    private javax.swing.JTextField num_sugerencias;
    private javax.swing.JTextField num_vacios;
    private javax.swing.JButton repeticion;
    private javax.swing.JTable tabla_inserta_coordenadas;
    private javax.swing.JTable tabla_principal;
    private javax.swing.JTextField text_errores;
    private javax.swing.JTextField text_vacios;
    // End of variables declaration//GEN-END:variables

}
